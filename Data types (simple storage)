// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

contract SimpleStorage {
    uint256 favoriteNumber = 7;
    bool favoriteBool = true;
    string favoriteString = "Hello";
    int256 favoriteInteger = -7;
    address favoriteAddress = 0x50e3FcEe37fce85523B4CFc1df99dD4ce210Ba6C;
    bytes32 favouriteByte = "Dog";
}





pragma solidity ^0.8.30;
// SPDX-License-Identifier: MIT

contract SimpleStorage {
    // this will get initialized to 0!
    uint256 favoriteNumber;
    bool favoriteBool;
    
    struct People {
        uint256 favoriteNumber;
        string name;
    }

    People[] public people;
    mapping(string => uint256) public nameToFavoriteNumber;

    People public person = People({favoriteNumber:2,name:"Patrick"});

    function store(uint256 _favoriteNumber) public {
        favoriteNumber = _favoriteNumber;
    }
    
    // view, pure - don't have to make a transaction on thse two functions
    function retrieve() public view returns(uint256) {
        return favoriteNumber;
    }

    function addPerson(string memory _name, uint256 _favoriteNumber) public {
        people.push(People(_favoriteNumber, _name));
        nameToFavoriteNumber[_name] = _favoriteNumber;
    }
}


